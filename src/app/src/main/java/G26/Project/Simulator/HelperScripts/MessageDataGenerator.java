package G26.Project.Simulator.HelperScripts;

import android.util.Log;

import androidx.annotation.NonNull;

import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.Task;
import com.google.firebase.firestore.CollectionReference;
import com.google.firebase.firestore.DocumentSnapshot;
import com.google.firebase.firestore.FirebaseFirestore;

import java.util.HashMap;
import java.util.Map;
import java.util.Random;

import G26.Project.Model.Restaurant.Restaurant;
import G26.Project.ViewController.Util.FireStoreService;


/**
 * A script to generate message and rating data
 * It is list here for check purpose
 * <p>
 *      This script use validate database items to generate the message and rating
 *      data, and use the app's 'sendMessage' and 'sendRating'  function to update the firebase
 * <p>
 * {@code @Author: Jing Li}
 *           UID : u7533831
 * <p>
 * External resource : Chat GPT 4.0 (line : 98-225)
 */
public class MessageDataGenerator {
    /**
     * user IDs, use to generate usr related information
     */
    public static final String[] UID = {
            "MG1dZMZYu7PV5teMT9hYMpbmcsr2", /*123@anu.edu.au*/
            "ReaUwKFGwMblJUcCmIlreYpFT412", /*1234@gmail.com*/
            "XKY1JLp8TMhME18PdvnME5TRbaM2", /*comp6442@anu.edu.au*/
            "bJtOYhMFo7VwFfJTqJ8JRhu0WU22", /*comp2100@anu.edu.au*/
            "dDsp59eHBzRYEQqosp9MHyqCq8f1", /*2@2.com*/
            "gM1iqxxOZWTil32YLmRC6q3upjs2", /*egg@qq.com*/
            "kLxMliQ0GMb69Q8A0Y0hKamFHfo1", /*123@123.com*/
            "w18fB5k9aQOTls3HWAJM3YmR4Gb2"  /*test@test.com*/
    };

    /**
     * restaurant IDs, use to generate usr related information
     */
    public static final String[] restaurantID = {
            "1hd2loBmmr0No04PDI2V",
            "2DCVsO1u94rLZ3lawHH7",
            "6QkpTIXkkCErqNC3iLX9",
            "AOHWFcruALjYuxF2OySB",
            "BH0fMoJcIeYQfO2yn7Jz",
            "BLvS4jHOxXnXtoN6UoQT",
            "D6Oo0dqVoqDMydJ7fxv7",
            "E1zlg3cb3hbGoE9A4MjF",
            "EvniVOMqxixEF7LAf8F2",
            "EvxFq8DyrOrviMqyhlav",
            "Gem9QOq8bDzs2HtUFCS1",
            "JMAsSTLQiLeDOLQ2826q",
            "JuhCBYeCzTBsNec43mDz",
            "K1fnGuEVgZFzIVsc887p",
            "MQtmZa4RIcb76lHgO7vT",
            "RxlAJMaRqrzrBUe83y2U",
            "WEIRnW0EBGhypkPn9R9F",
            "cW25N13wgXeaTKDpy4Ms",
            "f93ZWQIR4UOn4TU80Sq6",
            "ikMKWygTk4Wmc5LQcwtE",
            "j58N4MplLaopQNBnFYjD",
            "kDGM1IBwSMZzpv6QdjiX",
            "mNC4Kkf9nrc0AoNNjtai",
            "mwhjPwiNL0r85cRnPU3B",
            "obuZr072WUbjmbqsnqlR",
            "qPSoM262xwtqCK0gXD1A",
            "qjx8cD8KJMd4Xz4llndF",
            "rjX1ViA1t1G12RNT7pBH",
            "twhRsqO3Oqj8zxhy8jlj"
    };

    private static final Map<String, String> UID_TO_USERNAME_MAP = new HashMap<>();
    static {
        UID_TO_USERNAME_MAP.put("MG1dZMZYu7PV5teMT9hYMpbmcsr2", "123@anu.edu.au");
        UID_TO_USERNAME_MAP.put("ReaUwKFGwMblJUcCmIlreYpFT412", "1234@gmail.com");
        UID_TO_USERNAME_MAP.put("XKY1JLp8TMhME18PdvnME5TRbaM2", "comp6442@anu.edu.au");
        UID_TO_USERNAME_MAP.put("bJtOYhMFo7VwFfJTqJ8JRhu0WU22", "comp2100@anu.edu.au");
        UID_TO_USERNAME_MAP.put("dDsp59eHBzRYEQqosp9MHyqCq8f1", "2@2.com");
        UID_TO_USERNAME_MAP.put("gM1iqxxOZWTil32YLmRC6q3upjs2", "egg@qq.com");
        UID_TO_USERNAME_MAP.put("kLxMliQ0GMb69Q8A0Y0hKamFHfo1", "123@123.com");
        UID_TO_USERNAME_MAP.put("w18fB5k9aQOTls3HWAJM3YmR4Gb2", "test@test.com");
    }

    /**
     * This comments are generated by ChatGPT 4.0, use commands : "Can u please give me 100 comments to a restaurant"
     */
    private static final String[] COMMENTS = {
            "Great place to dine in!",
            "Absolutely loved the ambiance!",
            "The food was mediocre, expected better.",
            "Had a wonderful time here!",
            "The service needs improvement.",
            "Will definitely come back!",
            "A bit pricey, but worth it.",
            "Not my cup of tea.",
            "One of the best experiences!",
            "The desserts are a must-try!", "The food makes up for the service.",
            "Loved their seafood options.",
            "We had to wait despite having a reservation.",
            "Feels like a true gourmet experience.",
            "The restroom was very clean.",
            "Parking can be an issue.",
            "Worth every penny!",
            "The pizza crust was too hard.",
            "They should consider revamping the menu.",
            "A delightful culinary journey.",
            "Friendly atmosphere and homey vibe.",
            "A must-visit for foodies!",
            "Feels a bit cramped inside.",
            "The rooftop seating is a treat.",
            "Can't believe I hadn't discovered this place earlier!",
            "Fusion dishes are their strong suit.",
            "The soup was cold, unfortunately.",
            "Cocktails were mixed perfectly.",
            "The place could use better lighting.",
            "A true gastronomic adventure.",
            "We loved the live music.",
            "Don't miss their brunch specials.",
            "The themed nights are a lot of fun.",
            "The servers were a bit inattentive.",
            "Feels a bit overpriced for the quality.",
            "A delightful surprise!",
            "The salad was fresh and crisp.",
            "The wine list is impressive.",
            "The beer was a bit flat.",
            "A family-friendly dining spot.",
            "Their homemade pasta is to die for.",
            "The sushi rolls were a bit small.",
            "Tantalizing flavors in every bite!",
            "The restaurant was too crowded.",
            "A serene spot to unwind and dine.",
            "The burger was juicy and well-made.",
            "Wish they had more gluten-free options.",
            "This place is all about the presentation.",
            "Desserts were the highlight of our meal.",
            "The mocktails are refreshing.",
            "The steak was a bit too chewy.",
            "The staff went above and beyond for us.",
            "Perfect for a leisurely lunch.",
            "The buffet spread was incredible.",
            "Don't miss the chef's specials.",
            "I found the food a bit too salty.",
            "Impressive interiors and decor.",
            "Their signature dish is a must-try.",
            "The coffee was a bit too strong.",
            "Wish they had more vegan desserts.",
            "The portions are generous.",
            "The place feels a bit outdated.",
            "A modern twist to classic dishes.",
            "The fries were too soggy.",
            "An authentic taste of the region.",
            "The ice cream selection is vast.",
            "The staff could use more training.",
            "The seafood platter was amazing!",
            "Their daily specials are worth a try.",
            "We had a great view of the city.",
            "The music set the right mood.",
            "The pastries are freshly baked.",
            "The grilled chicken was too dry.",
            "They should expand their drinks menu.",
            "The spices were just right.",
            "The menu is a bit confusing.",
            "A relaxing dining experience.",
            "The appetizers stole the show."
    };

    /**
     * This messages are generated by ChatGPT 4.0, use commands : "Can u please give me 100 p2p messages"
     */
    private static final String[] MESSAGE_CONTENTS = {
            "Hey, how are you?",
            "Long time no see!",
            "When are we meeting next?",
            "I found this great place for lunch.",
            "Hope you're doing well.",
            "I saw that movie you recommended. It was great!",
            "Do you have the notes from yesterday?",
            "Let's catch up soon.",
            "Sending you best wishes!",
            "Remember our trip to the beach last summer?",
            "Did you manage to get those tickets?",
            "I think I left my jacket at your place.",
            "Happy Birthday! ðŸŽ‰",
            "Thanks for your help yesterday.",
            "Have you seen the latest episode?",
            "We should plan another trip soon.",
            "How's the new job going?",
            "Thinking of you and hoping you're okay.",
            "I'm sorry, can we reschedule our meeting?",
            "I've got some exciting news to share!",
            "Can you recommend a good book?",
            "Have you started the new project?",
            "I'm in town next week. Want to meet up?",
            "It's been too long since we last spoke.",
            "Thanks for the lovely gift!",
            "I'm really proud of you.",
            "Guess what I just heard?",
            "I was just thinking about our college days.",
            "I hope everything's alright.",
            "You won't believe who I bumped into today!",
            "Let's start our own book club.",
            "How's your family?",
            "I've moved to a new place. Let's catch up!",
            "Do you want to go for a run tomorrow morning?",
            "Just checking in to see how you're doing.",
            "Remember to take a break and relax.",
            "I tried that recipe you gave me. It was amazing!",
            "We need to celebrate soon!",
            "I miss our chats.",
            "Good luck with your presentation today.",
            "I'm here if you need to talk.",
            "How's your pet doing?",
            "Did you go to the event last weekend?",
            "I'm so glad we met.",
            "I've found this new cafe. You'll love it!",
            "Stay safe and take care.",
            "I can't thank you enough."
    };

    private static String getUserNameFromUid(String uid) {
        return UID_TO_USERNAME_MAP.getOrDefault(uid, "unknown@unknown.com");
    }

    private static final Random random = new Random();

    private static final FirebaseFirestore db = FireStoreService.getInstance().getFirebaseDatabase();

    private static String generateRandomComment() {
        return COMMENTS[random.nextInt(COMMENTS.length)];
    }

    private static String generateRandomRestaurantID() {
        return restaurantID[random.nextInt(restaurantID.length)];
    }

    private static float generateRandomRating() {
        return random.nextFloat() * 5;  // rating between 0 and 5
    }

    /**
     * Uploads a random comment and rating for a user.
     */
    public static void uploadRandomCommentAndRatingForUser() {
        String uid = UID[random.nextInt(UID.length)];
        // Generate random data
        String randomComment = generateRandomComment();
        float randomRating = generateRandomRating();
        String userName = getUserNameFromUid(uid);
        String restaurantID = generateRandomRestaurantID();

        db.collection("restaurants")
                .document(restaurantID)
                .get()
                .addOnCompleteListener(new OnCompleteListener<DocumentSnapshot>() {
                    @Override
                    public void onComplete(@NonNull Task<DocumentSnapshot> task) {
                        if (task.isSuccessful()) {
                            DocumentSnapshot document = task.getResult();
                            if (document.exists()) {
                                Log.d("Firestore", "DocumentSnapshot data: " + document.getData());

                                // Convert the DocumentSnapshot to a Restaurant object
                                Restaurant restaurant = document.toObject(Restaurant.class);
                                String resName = restaurant.getRestaurantName();
                                String resType = restaurant.getType().toString();
                                String resCity = restaurant.getRestaurantCity();

                                // Now that we have all necessary data, structure the rating data
                                RatingData ratingData = new RatingData(uid, userName,
                                        randomComment, randomRating,
                                        restaurantID, resName,
                                        resCity, resType);

                                // Upload the rating data to Firebase Firestore
                                CollectionReference simulationDataRef = db.collection("Ratings");

                                // Add the rating data to the "rating" subcollection under the document
                                simulationDataRef.add(ratingData)
                                        .addOnSuccessListener(aVoid -> Log.d("Generator", "Successfully uploaded data!"))
                                        .addOnFailureListener(e -> Log.d("Generator", "Error uploading data: ", e));
                            } else {
                                Log.d("Firestore", "No such document");
                            }
                        } else {
                            Log.d("Firestore", "get failed with ", task.getException());
                        }
                    }
                });
    }

    /**
     * Uploads random messages for all users.
     */
    public static void uploadRandomMessages() {
        for (String uid : UID) {
            uploadRandomMessage(uid);
        }
    }

    /**
     * Uploads a random message for a specific user.
     *
     * @param senderID The ID of the sender user.
     */
    private static void uploadRandomMessage(String senderID) {
        String targetID;

        do {
            targetID = UID[random.nextInt(UID.length)];
        } while (senderID.equals(targetID));  // Ensure the senderID and targetID are not the same

        String content = MESSAGE_CONTENTS[random.nextInt(MESSAGE_CONTENTS.length)];

        // Structure the data
        MessageData messageData = new MessageData(senderID, targetID, content);

        // Upload the data to Firebase Firestore
        CollectionReference messageRef = db.collection("P2P");
        messageRef.add(messageData)
                .addOnSuccessListener(aVoid -> Log.d("Generator","Successfully uploaded data!"))
                .addOnFailureListener(e -> Log.d("Generator","Error uploading data: " + e.getMessage()));
    }

    /**
     * Helper class representing rating data.
     */
    static class RatingData {
        String uid;
        String comments;
        float rating;
        private String userName;
        String restaurantID;

        String resName;
        String resType;
        String resCity;


        public String getUserName() {
            return userName;
        }

        public void setUserName(String userName) {
            this.userName = userName;
        }

        public void setRestaurantID(String restaurantID) {
            this.restaurantID = restaurantID;
        }

        public void setResName(String resName) {
            this.resName = resName;
        }

        public void setResType(String resType) {
            this.resType = resType;
        }

        public void setResCity(String resCity) {
            this.resCity = resCity;
        }

        public RatingData(String uid, String userName,
                          String comments, float rating,
                          String restaurantID, String resName,
                          String resCity, String resType) {
            this.uid = uid;
            this.comments = comments;
            this.userName = userName;
            this.rating = rating;
            this.restaurantID = restaurantID;
            this.resName = resName;
            this.resCity = resCity;
            this.resType = resType;
        }

        public String getUid() {
            return uid;
        }

        public String getComments() {
            return comments;
        }

        public float getRating() {
            return rating;
        }

        public void setUid(String uid) {
            this.uid = uid;
        }

        public void setComments(String comments) {
            this.comments = comments;
        }

        public void setRating(float rating) {
            this.rating = rating;
        }

        public String getRestaurantID() {
            return restaurantID;
        }

        public String getResName() {
            return resName;
        }

        public String getResType() {
            return resType;
        }

        public String getResCity() {
            return resCity;
        }
    }

    /**
     * Helper class representing message data.
     */
    static class MessageData {
        String senderID;
        String targetID;
        String content;

        public MessageData(String senderID, String targetID, String content) {
            this.senderID = senderID;
            this.targetID = targetID;
            this.content = content;
        }

        public String getSenderID() {
            return senderID;
        }

        public String getTargetID() {
            return targetID;
        }

        public String getContent() {
            return content;
        }
    }
}
